in my node.js + express app I have:

file "server.js":

...
const db = require("./src/models");
...
const app = express();
...

app.all(/^\/api(\/.*)?$/, (req, res, next) => {
  next();
});
require("./src/routes/auth.routes")(app);
require("./src/routes/user.routes")(app);
require("./src/routes/product.routes")(app);
require("./src/routes/payment.routes")(app);
require("./src/routes/misc.routes")(app);
...
try {
  db.connect(); // connect to database, synchronously
} catch (err) {
  logger.error("Database connection error:", err);
  throw err;
}

async function start() {
  try {
    const port = 5000;
    const host = "0.0.0.0";
    app.listen(port, host, () => {
      logger.info(`Server is running on ${host}:${port}`);
    });
  } catch (err) {
    logger.error("Server listen error:", err);
    throw err;
  }
}

// if not in test mode, start the server
if (!config.mode.test) {
  start();
}

// export the app
module.exports = app;

// end of file server.js


file "models/index.js":

...
const demoData = {
  users: [{ name: 'Alice', email: 'alice@gmail.com' }, { name: 'Bob', email: 'bob@gmail.com'}],
  products: [{ name: 'Product1' }, { name: 'Product2' }],
};

...


const connect = async() => {
  // set up database connection uri
  const connUri = (
    config.mode.production || config.mode.staging) ? // production/staging db uri
    `${process.env.MONGO_SCHEME}://${process.env.MONGO_USER}:${process.env.MONGO_PASS}@${process.env.MONGO_URL}/${process.env.MONGO_DB}` :
    config.mode.development ? // development db uri
      `${process.env.MONGO_DEV_LOCAL_SCHEME}://${process.env.MONGO_DEV_LOCAL_URL}/${process.env.MONGO_DEV_LOCAL_DB}` :
      config.mode.test ? // test db uri
        `${process.env.MONGO_TEST_LOCAL_SCHEME}://${process.env.MONGO_TEST_LOCAL_URL}/${process.env.MONGO_TEST_LOCAL_DB}` :
        null
  ;
  if (!connUri) {
    const err = `Unforeseen mode ${JSON.stringify(config.mode)}, cannot connect database`;
    logger.error(err);
    throw new Error(err);
  }

  try {
    await mongoose.connect(connUri, {});
    logger.info("Database connected");
  } catch (err) {
    logger.error("Database connection error:", err);
    throw err;
  }
};

/**
 * first time populate static reference documents
 */
const populate = async () => {
  try {
    // drop all database collections if in test mode
    mongoose.connection.once("open", async () => {

      if (config.mode.test) {
        const collections = await mongoose.connection.db.collections();
        for (let collection of collections) {
          await collection.drop();
          console.log(`Collection dropped`);
        }
      }

      console.log("populate has dropped all collections...");

      try {
        const userCount = await User.estimatedDocumentCount();
        if (userCount === 0) {
          await mongoose.connection.db.collection("users").insertMany(demoData.users);
        } catch (err) {
          console.error("Error populating User collection:", err.message);
          throw err;
        }

      try {
        const productCount = await Product.estimatedDocumentCount();
        if (productCount === 0) {
          await mongoose.connection.db.collection("products").insertMany(demoData.products);
        }
      } catch (err) {
        console.error("Error populating Products collection:", err.message);
        throw err;
      }

      console.log("populate returns here");
    });
  } catch (err) {
    console.log("Error in populate:", err.message);
  }
};

module.exports = {
  connect,
  populate,
};

// end of file models/index.js


To start a development session, I do:

  NODE_ENV=development node server.js

and everything seems working fine, in a synchronous way... Database connects, then populate runs.
In the logs, I get:
INFO: 2025-02-11T19:57:52.239Z Development environment
INFO: 2025-02-11T19:57:52.420Z Server is running on 0.0.0.0:5000
INFO: 2025-02-11T19:57:52.473Z Database connected
populate
user count: 1
products count: 4
populate returns here

INSTEAD

my test folder contains:

file server.test.js:

const chai = require("chai");
const request = require("supertest");
const app = require("../server");
const { getAuthCookies } = require("./setup/setup.test");
const config = require("./config.test");

const { assert } = chai;
const agent = request(app); 


describe("Server unit tests - Protected endpoints", () => {
  it("should access users/getAllUsersWithTokens with valid token", async () => {
    const response = await agent
      .get("/api/user/getAllUsersWithTokens")
      .set("Cookie", getAuthCookies());
    ;
    assert.equal(response.status, 200);
  });

  it("should reject request to users/getAllUsersWithTokens without token", async () => {
    const response = await agent
      .get("/api/user/getAllUsersWithTokens")
    ;
    assert.equal(response.status, 401);
  });
});

require("./basic/basic.test");
require("./helpers/environment.test");
require("./controllers/auth.test");


file setup/setup.test.js:
const request = require("supertest");
const app  = require("../../server");
const config = require("../config.test");

const agent = request(app);

let accessTokenCookie, refreshTokenCookie = null;

// before hook to log in the user and get the auth cookie
before(async () => {
  // log in the user programmatically
  const loginResponse = await agent
    .post("/api/auth/signin")
    .send({
      email: config.defaultUsers.admin.email,
      password: config.defaultUsers.admin.password,
    });

  console.log("loginResponse:", loginResponse[loginResponse]);
  // extract the httpOnly cookie from the response
  accessTokenCookie = loginResponse.headersc
    .find((cookie) => cookie.startsWith("accessToken=")); //.replace(/(.*?);.*/, "$1");
  refreshTokenCookie = loginResponse.headers["set-cookie"]
    .find((cookie) => cookie.startsWith("refreshToken=")); //.replace(/(.*?);.*/, "$1");

  if (!accessTokenCookie) {
    throw new Error("Login failed: no accessToken cookie found");
  }
  if (!refreshTokenCookie) {
    throw new Error("Login failed: no refreshToken cookie found");
  }
});

module.exports = {
  getAuthCookies: () => ([ accessTokenCookie, refreshTokenCookie ])
};



To start tests, I do:

  NODE_ENV=TEST && mocha --exit --timeout 5000 --slow 150 --bail test/

and I get:



INFO: 2025-02-11T20:12:40.029Z Database connected
populate
INFO: 2025-02-11T20:12:40.116Z POST /api/auth/signin HTTP/1.1 401 '-' - 63.498 ms
user count: 1
loginResponse: undefined
  1) "before all" hook in "{root}"

  0 passing (123ms)
  1 failing

  1) "before all" hook in "{root}":
     TypeError: Cannot read properties of undefined (reading 'find')
      at Context.<anonymous> (test/setup/setup.test.js:22:6)
      at process.processTicksAndRejections (node:internal/process/task_queues:95:5)


The worst problem I see is that I only see the first populate log, but not other populate logs, and then immediately
"POST /api/auth/signin" which means populate is not yet finished, or errors out without notice!
Can you helm me sort it out?