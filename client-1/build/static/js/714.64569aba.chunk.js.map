{"version":3,"file":"static/js/714.64569aba.chunk.js","mappings":"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","sources":["components/DialogConfirm.js","components/DialogEmailCreation.js","components/HandleUsers.js"],"sourcesContent":["import React from \"react\";\nimport { Dialog, DialogActions, DialogContent, DialogContentText, DialogTitle, Button } from \"@material-ui/core\";\n\nfunction ConfirmDialog({ open, onClose, onConfirm, title, message, confirmText, cancelText }) {\n  return (\n    <Dialog open={open} onClose={onClose}>\n      <DialogTitle>{title}</DialogTitle>\n      <DialogContent>\n        <DialogContentText>{message}</DialogContentText>\n      </DialogContent>\n      <DialogActions>\n        <Button onClick={onClose} color=\"secondary\">\n          {cancelText}\n        </Button>\n        <Button onClick={onConfirm} color=\"success\">\n          {confirmText}\n        </Button>\n      </DialogActions>\n    </Dialog>\n  );\n}\n\nexport default ConfirmDialog;\n","import React, { useState } from \"react\";\nimport { useTranslation } from \"react-i18next\";\nimport { Dialog, DialogActions, DialogContent, DialogContentText, DialogTitle, Box, TextField } from \"@material-ui/core\";\nimport { Subject } from \"@material-ui/icons\";\nimport { FormInput, FormButton } from \"./FormElements\";\nimport { toast } from \"./Toast\";\n\nfunction DialogEmailCreation({ open, onClose, onConfirm }) {\n  //const classes = useStyles();\n  const { t } = useTranslation();\n  const [subject, setSubject] = useState(\"\");\n  const [body, setBody] = useState(\"\");\n  const [error, setError] = useState({});\n\n  const validateForm = () => {\n    if (!subject) {\n      let err = t(\"Please supply an email subject\");\n      setError({ subject: err });\n      toast.warning(err);\n      return false;\n    }\n    if (!body) {\n      let err = t(\"Please supply an email body\");\n      setError({ body: err });\n      toast.warning(err);\n      return false;\n    }\n    return true;\n  };\n\n  const cleanForm = () => {\n    setSubject(\"\");\n    setBody(\"\");\n  }\n\n  const onCloseWithValidation = (e) => {\n    onClose();\n    cleanForm();\n  }\n\n  const onConfirmWithValidation = (e) => {\n    e.preventDefault();\n    if (!validateForm()) return;\n    setError({});\n    onConfirm({ subject, body });\n    cleanForm();\n  }\n\n  return (\n    <Dialog\n      open={open}\n      onClose={onClose}\n      fullWidth\n      maxWidth=\"sm\"\n    >\n      <DialogTitle>{t(\"Create email\")}</DialogTitle>\n      <DialogContent>\n        <DialogContentText>\n          <FormInput\n            autoFocus\n            id={\"subject\"}\n            value={subject}\n            onChange={e => setSubject(e.target.value)}\n            placeholder={t(\"Subject\")}\n            startAdornmentIcon={<Subject />}\n            error={error.subject}\n          />\n          <Box m={0} />\n          <FormInput\n            id={\"body\"}\n            value={body}\n            onChange={e => setBody(e.target.value)}\n            placeholder={t(\"Body\")}\n            //startAdornmentIcon={<Drafts />}\n            error={error.body}\n            multiline\n            rows={4}\n            maxRows={Infinity}\n          />\n          <Box m={0} />\n          </DialogContentText>\n      </DialogContent>\n      <DialogActions>\n        <FormButton onClick={onCloseWithValidation} color=\"secondary\">\n          {t(\"Cancel\")}\n        </FormButton>\n        <FormButton onClick={onConfirmWithValidation} color=\"primary\">\n          {t(\"Send email to selected users\")}\n        </FormButton>\n      </DialogActions>\n    </Dialog>\n  );\n}\n\nexport default DialogEmailCreation;\n","import React, { useState, useEffect } from \"react\";\nimport { useHistory } from \"react-router-dom\";\nimport { useTranslation } from \"react-i18next\";\nimport { makeStyles } from \"@material-ui/styles\";\nimport DialogConfirm from \"./DialogConfirm\";\nimport DialogEmailCreation from \"./DialogEmailCreation\";\nimport { FormTitle } from \"./FormElements\";\nimport moment from \"moment\";\nimport \"moment/locale/it\"; // TODO: import all needed locales... (!!!)\nimport { getUsers, removeUser, sendEmailToUsers } from \"../libs/Fetch\";\nimport { toast } from \"./Toast\";\nimport {\n  Box,\n  Button,\n  Checkbox,\n  IconButton,\n  InputAdornment,\n  Paper,\n  Table,\n  TableBody,\n  TableCell,\n  TableContainer,\n  TableHead,\n  TableRow,\n  TablePagination,\n  TextField,\n  Typography,\n} from \"@material-ui/core\";\nimport { Search, Edit, Delete } from \"@material-ui/icons\";\n\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    \"& .MuiTableCell-head\": {\n      color: theme.palette.header.color,\n      backgroundColor: theme.palette.header.backgroundColor,\n    },\n  },\n  outlinedInput: {\n    \"& $notchedOutline\": {\n      borderColor: \"lightgray\",\n    },\n    \"&$focused $notchedOutline\": {\n      borderColor: \"blue\",\n    },\n  },\n  notchedOutline: {},\n  focused: {},\n  table: {\n    fontSize: \"0.9em\",\n    minWidth: 650,\n  },\n  tableContainer: {\n    maxHeight: 440,\n  },\n  tableHeader: {\n    backgroundColor: theme.palette.background.default,\n    position: \"sticky\",\n    top: 0,\n    zIndex: 1,\n  },\n  tableCell: {\n    padding: \"2px 16px\",\n  },\n  actionsCell: {\n    whiteSpace: \"nowrap\",\n  },\n  headerCheckbox: {\n    paddingLeft: \"20px\",\n  },\n  title: {\n    padding: 8,\n    paddingRight: 24,\n    borderRadius: 4,\n    textAlign: \"right\",\n    color: theme.palette.title.color,\n    backgroundColor: theme.palette.title.backgroundColor,\n  },\n  filter: {\n    padding: 2,\n    textAlign: \"right\",\n  },\n  sortButton: {\n    marginLeft: 12,\n    // backgroundColor: \"green\",\n  },\n  sortButtonActive: {\n    // fontSize: \"1.5em\",\n    opacity: \"80%\"\n  },\n  sortButtonInactive: {\n    opacity: \"40%\",\n  },\n  bulkButton: {\n    marginRight: 8,\n  },\n  removeButton: {\n    //color: theme.palette.danger.color,\n    backgroundColor: theme.palette.danger.backgroundColor,\n  },\n}));\n\n\nconst UserTable = (/*{ users, onEdit, onRemove, onBulkAction }*/) => {\n  const classes = useStyles();\n  const history = useHistory();\n  const { t } = useTranslation();\n\n  const [users, setUsers] = useState([]);\n  const [filter, setFilter] = useState(\"\");\n\n  useEffect(() => {\n    getUsers({}).then((data) => {\n      if (!data.ok) {\n        console.warn(\"getUsers error:\", data);\n        if (data.message) {\n          toast.error(t(data.message)); \n        }\n        return;\n      }\n      //toast.info(`${data.users.length} users loaded`);\n      setUsers(data.users);\n      console.log(\"getUsers success:\", data);\n    });\n  }, [t]);\n  \n  const onEdit = (userId) => {\n    //alert(\"onEdit \" + userId);\n    //history.push(\"/edit-user\", { data: { userId } });\n    history.push(`/edit-user/${userId}`);\n  };\n  \n  const onRemove = async (userId) => {\n    //removeUser({ filter: { _id: userId } }).then((data) => {\n    removeUser({ filter: [userId] }).then((data) => {\n        if (!data.ok) {\n        console.warn(\"removeUser error:\", data);\n        if (data.message) {\n          toast.error(t(data.message));\n        }\n        return;\n      }\n      // update the state to filter the removed user from the list\n      setUsers(previousUsers => previousUsers.filter(user => user._id !== userId));\n    }).catch(error => {\n      console.error(`Error deleting user with id ${userId}: ${error.message}`);\n      toast.error(`${t(\"Error deleting user with id\")} ${userId}: ${error.message}`);\n    });\n  };\n\n  const onBulkEmail = async (userIds, params) => {\n    sendEmailToUsers({ filter: userIds, ...params }).then((data) => {\n    //sendEmailToUsers({ _id: { $in: userIds }}, ...params).then((data) => {\n      if (!data.ok) {\n        console.warn(\"sendEmailToUsers error:\", data);\n        if (data.message) {\n          toast.error(data.message);\n        }\n        return;\n      }\n      toast.success(t(\"Email sent to {{count}} selected users\", { count: userIds.length }));\n    }).catch(error => {\n      console.error(`Error bulk sending email to users with ids ${userIds}: ${error.message}`);\n      toast.error(`${t(\"Error bulk sending email to users with ids\")} ${userIds}: ${error.message}`);\n    });\n  };\n\n  const onBulkRemove = async (userIds, params) => {\n    removeUser({ filter: userIds, ...params }).then((data) => {\n    //removeUser({ filter: { _id: { \"$in\": userIds } } }).then((data) => {\n        if (!data.ok) {\n        console.warn(\"removeUser error:\", data);\n        if (data.message) {\n          toast.error(data.message);\n        }\n        return;\n      }\n      // update the state to filter the removed user from the list\n      setUsers(previousUsers => previousUsers.filter(user => !userIds.includes(user._id)));\n    }).catch(error => {\n      console.error(`Error bulk deleting users with ids ${userIds}: ${error.message}`);\n      toast.error(`${t(\"Error bulk deleting users with ids\")} ${userIds}: ${error.message}`);\n    });\n  };\n\n  moment.locale(\"it\");\n\n  const [page, setPage] = useState(0);\n  const [rowsPerPage, setRowsPerPage] = useState(5);\n  const [selected, setSelected] = useState([]);\n\n  const handleFilterChange = (event) => {\n    setFilter(event.target.value);\n  };\n\n  const handleChangePage = (event, newPage) => {\n    setPage(newPage);\n  };\n\n  const handleChangeRowsPerPage = (event) => {\n    setRowsPerPage(parseInt(event.target.value, 10));\n    setPage(0);\n  };\n\n  const handleSelectAllClick = (event) => {\n    if (event.target.checked) {\n      const newSelected = users.map((user) => user._id);\n      setSelected(newSelected);\n      return;\n    }\n    setSelected([]);\n  };\n\n  const handleClick = (event, id) => {\n    const selectedIndex = selected.indexOf(id);\n    let newSelected = [];\n\n    if (selectedIndex === -1) {\n      newSelected = newSelected.concat(selected, id);\n    } else if (selectedIndex === 0) {\n      newSelected = newSelected.concat(selected.slice(1));\n    } else if (selectedIndex === selected.length - 1) {\n      newSelected = newSelected.concat(selected.slice(0, -1));\n    } else if (selectedIndex > 0) {\n      newSelected = newSelected.concat(\n        selected.slice(0, selectedIndex),\n        selected.slice(selectedIndex + 1),\n      );\n    }\n\n    setSelected(newSelected);\n  };\n\n  const onAction = (selectedIds, action, params) => {\n    switch (action) {\n      case \"removeBulk\":\n        onBulkRemove(selectedIds);\n        break;\n      case \"emailBulk\":\n        onBulkEmail(selectedIds, params);\n        break;\n      default:\n        alert(\"unforeseen bulk action \" + selectedIds.join(\", \") + \" \" + action); // TODO...\n    }\n  }\n\n  const isSelected = (id) => selected.indexOf(id) !== -1;\n\n  const [sortColumn, setSortColumn] = useState(\"lastName\");\n  const [sortDirection, setSortDirection] = useState(\"asc\");\n  \n  const handleSort = (columnId) => () => {\n    let newDirection = \"asc\";\n  \n    if (sortColumn === columnId && sortDirection === \"asc\") {\n      newDirection = \"desc\";\n    }\n  \n    setSortColumn(columnId);\n    setSortDirection(newDirection);\n  };\n\n  const [action, setAction] = useState(\"\");\n\n  const [confirmOpen, setConfirmOpen] = useState(false);\n  const handleConfirmOpen = (action) => { setAction(action); setConfirmOpen(true); }\n  const handleConfirmClose = () => { setConfirmOpen(false); setAction(\"\"); /*setSelected([]);*/ }\n  const handleConfirm = () => { // perform the action on confirmation\n    onAction(selected, action);\n    handleConfirmClose();\n  };\n\n  const [emailCreationOpen, setEmailCreationOpen] = useState(false);\n  const handleEmailCreationOpen = (action) => { setAction(action); setEmailCreationOpen(true); }\n  const handleEmailCreationClose = () => { setEmailCreationOpen(false); setAction(\"\"); }\n  const handleEmailCreation = (params) => { // perform the action on email creation complete\n    onAction(selected, action, params);\n    handleEmailCreationClose();\n  };\n\n  const sortedUsers = React.useMemo(() => {\n    let sortedUsers = [...users];\n  \n    if (sortColumn !== null) {\n      sortedUsers.sort((a, b) => {\n        let one = a[sortColumn]?.toLowerCase();\n        let two = b[sortColumn]?.toLowerCase();\n        if (one < two) return sortDirection === \"asc\" ? -1 : 1;\n        if (one > two) return sortDirection === \"asc\" ? 1 : -1;\n        return 0;\n      });\n    }\n    return sortedUsers;\n  }, [users, sortColumn, sortDirection]);\n\n  const sortButton = (props) => {\n    return (\n      <Typography component=\"span\" className={[classes.sortButton, (sortColumn === props.column) ? classes.sortButtonActive : classes.sortButtonInactive]}>\n        { (sortColumn === props.column) ? (sortDirection === \"asc\" ? \"▼\" : \"▲\") : \"▢\" }\n      </Typography>\n    );\n  };\n\n  return (\n    <>\n      <FormTitle>\n        {t(\"Users handling\")}\n      </FormTitle>\n\n      <Box sx={{ marginBottom: 8}} className={classes.filter}>\n        <TextField\n          label={t(\"Filter users\")}\n          value={filter}\n          onChange={handleFilterChange}\n          variant=\"outlined\"\n          InputLabelProps={{\n            shrink: true,\n          }}\n          InputProps={{\n            startAdornment: (\n              <InputAdornment position=\"end\">\n                <Search />\n              </InputAdornment>\n            ),\n            classes: { root: classes.outlinedInput, notchedOutline: classes.notchedOutline },\n          }}\n          sx={{ marginLeft: \"auto\", marginRight: 2 }}\n        />\n      </Box>\n      <Paper>\n        <TableContainer className={[classes.root, classes.tableContainer]}>\n          <Table stickyHeader className={classes.table}>\n            <TableHead>\n              <TableRow>\n                <TableCell padding=\"checkbox\" className={classes.tableHeader}>\n                  <Checkbox\n                    indeterminate={selected.length > 0 && selected.length < users.length}\n                    checked={users.length > 0 && selected.length === users.length}\n                    onChange={handleSelectAllClick}\n                    className={classes.headerCheckbox}\n                  />\n                </TableCell>\n                <TableCell className={`${classes.tableHeader} ${classes.tableCell}`} onClick={handleSort(\"firstName\")}>\n                  {t(\"First name\")} {sortButton({ column: \"firstName\" })}\n                </TableCell>\n                <TableCell className={`${classes.tableHeader} ${classes.tableCell}`} onClick={handleSort(\"lastName\")}>\n                  {t(\"Last name\")} {sortButton({ column: \"lastName\" })}\n                </TableCell>\n                <TableCell className={`${classes.tableHeader} ${classes.tableCell}`} onClick={handleSort(\"email\")}>\n                  {t(\"Email\")} {sortButton({ column: \"email\" })}\n                </TableCell>\n                <TableCell className={`${classes.tableHeader} ${classes.tableCell}`}>\n                  {t(\"Phone\")}\n                </TableCell>\n                <TableCell className={`${classes.tableHeader} ${classes.tableCell}`}>\n                  {t(\"Roles\")}\n                </TableCell>\n                <TableCell className={`${classes.tableHeader} ${classes.tableCell}`}>\n                  {t(\"Fiscal Code\")}\n                </TableCell>\n                <TableCell className={`${classes.tableHeader} ${classes.tableCell}`} onClick={handleSort(\"businessName\")}>\n                  {t(\"Business name\")} {sortButton({ column: \"businessName\" })}\n                </TableCell>\n                <TableCell className={`${classes.tableHeader} ${classes.tableCell}`}>\n                  {t(\"Actions\")}\n                </TableCell>\n              </TableRow>\n            </TableHead>\n            <TableBody>\n              {sortedUsers\n                .filter((user) => user.firstName.toLowerCase().includes(filter.toLowerCase()))\n                .slice(page * rowsPerPage, page * rowsPerPage + rowsPerPage)\n                .map((user) => {\n                  const isItemSelected = isSelected(user._id);\n                  return (\n                    <TableRow\n                      hover\n                      onClick={(event) => handleClick(event, user._id)}\n                      role=\"checkbox\"\n                      aria-checked={isItemSelected}\n                      tabIndex={-1}\n                      key={user._id}\n                      selected={isItemSelected}\n                    >\n                      <TableCell padding=\"checkbox\" className={classes.tableCell}>\n                        <Checkbox checked={isItemSelected} />\n                      </TableCell>\n                      <TableCell className={classes.tableCell}>{user.firstName}</TableCell>\n                      <TableCell className={classes.tableCell}>{user.lastName}</TableCell>\n                      <TableCell className={classes.tableCell}>{user.email}</TableCell>\n                      <TableCell className={classes.tableCell}>{user.phone}</TableCell>\n                      <TableCell className={classes.tableCell}>{user.roles.sort((a, b) => a[\"priority\"] < b[\"priority\"]).map(role => role[\"name\"]).join(\", \")}</TableCell>\n                      <TableCell className={classes.tableCell}>{user.fiscalCode}</TableCell>\n                      <TableCell className={classes.tableCell}>{user.businessName}</TableCell>\n                      <TableCell className={`${classes.tableCell} ${classes.actionsCell}`}>\n                        <IconButton size=\"small\" onClick={() => onEdit(user._id)}>\n                          <Edit fontSize=\"small\" />\n                        </IconButton>\n                        <IconButton size=\"small\" onClick={() => onRemove(user._id)}>\n                          <Delete fontSize=\"small\" />\n                        </IconButton>\n                      </TableCell>\n                    </TableRow>\n                  );\n                })}\n            </TableBody>\n          </Table>\n        </TableContainer>\n        <TablePagination\n          rowsPerPageOptions={[5, 10, 25]}\n          component=\"div\"\n          count={users.length}\n          rowsPerPage={rowsPerPage}\n          page={page}\n          onPageChange={handleChangePage}\n          onRowsPerPageChange={handleChangeRowsPerPage}\n        />\n        <Box sx={{ padding: 8 }}>\n          <Button\n            variant=\"contained\"\n            color=\"secondary\"\n            className={[classes.bulkButton]}\n            onClick={() => handleEmailCreationOpen(\"emailBulk\")}\n            disabled={selected.length === 0}\n          >\n            {t(\"Email selected users\")}\n          </Button>\n          <Button\n            variant=\"contained\"\n            color=\"primary\"\n            className={[classes.bulkButton, classes.removeButton]}\n            onClick={() => handleConfirmOpen(\"removeBulk\")}\n            disabled={selected.length === 0}\n          >\n            {t(\"Remove selected users\")}\n          </Button>\n        </Box>\n      </Paper>\n\n      <DialogConfirm\n        open={confirmOpen}\n        onClose={handleConfirmClose}\n        onConfirm={handleConfirm}\n        title={t(\"Confirm Delete\")}\n        // TODO: handle singular/plural\n        message={t(\"Are you sure you want to delete all the {{count}} selected users?\", { count: selected.length })}\n        confirmText={t(\"Confirm\")}\n        cancelText={t(\"Cancel\")}\n      />\n      <DialogEmailCreation\n        open={emailCreationOpen}\n        onClose={handleEmailCreationClose}\n        onConfirm={handleEmailCreation}\n        title={t(\"Create email\")}\n        // TODO: handle singular/plural\n        //message={t(\"Are you sure you want to send this email to all the {{count}} selected users?\", { count: selected.length })}\n        subjectLabel={t(\"Subject\")}\n        bodyLabel={t(\"Body\")}\n        confirmText={t(\"Send email to selected users\")}\n        cancelText={t(\"Cancel\")}\n      />\n    </>\n  );\n};\n\nexport default React.memo(UserTable);"],"names":["_ref","open","onClose","onConfirm","title","message","confirmText","cancelText","_jsxs","Dialog","children","_jsx","DialogTitle","DialogContent","DialogContentText","DialogActions","Button","onClick","color","t","useTranslation","subject","setSubject","useState","body","setBody","error","setError","cleanForm","fullWidth","maxWidth","FormInput","autoFocus","id","value","onChange","e","target","placeholder","startAdornmentIcon","Subject","Box","m","multiline","rows","maxRows","Infinity","FormButton","preventDefault","validateForm","err","toast","warning","useStyles","makeStyles","theme","root","palette","header","backgroundColor","outlinedInput","borderColor","notchedOutline","focused","table","fontSize","minWidth","tableContainer","maxHeight","tableHeader","background","default","position","top","zIndex","tableCell","padding","actionsCell","whiteSpace","headerCheckbox","paddingLeft","paddingRight","borderRadius","textAlign","filter","sortButton","marginLeft","sortButtonActive","opacity","sortButtonInactive","bulkButton","marginRight","removeButton","danger","UserTable","classes","history","useHistory","users","setUsers","setFilter","useEffect","getUsers","then","data","ok","console","warn","log","moment","page","setPage","rowsPerPage","setRowsPerPage","selected","setSelected","onAction","selectedIds","action","params","async","userIds","removeUser","previousUsers","user","includes","_id","catch","onBulkRemove","sendEmailToUsers","success","count","length","onBulkEmail","alert","join","sortColumn","setSortColumn","sortDirection","setSortDirection","handleSort","columnId","newDirection","setAction","confirmOpen","setConfirmOpen","handleConfirmClose","emailCreationOpen","setEmailCreationOpen","handleEmailCreationClose","sortedUsers","React","sort","a","b","_a$sortColumn","_b$sortColumn","one","toLowerCase","two","props","Typography","component","className","column","_Fragment","FormTitle","sx","marginBottom","TextField","label","event","variant","InputLabelProps","shrink","InputProps","startAdornment","InputAdornment","Search","Paper","TableContainer","Table","stickyHeader","TableHead","TableRow","TableCell","Checkbox","indeterminate","checked","newSelected","map","TableBody","firstName","slice","isItemSelected","indexOf","hover","handleClick","selectedIndex","concat","role","tabIndex","lastName","email","phone","roles","fiscalCode","businessName","IconButton","size","onEdit","userId","push","Edit","onRemove","Delete","TablePagination","rowsPerPageOptions","onPageChange","handleChangePage","newPage","onRowsPerPageChange","parseInt","handleEmailCreationOpen","disabled","handleConfirmOpen","DialogConfirm","handleConfirm","DialogEmailCreation","subjectLabel","bodyLabel"],"sourceRoot":""}