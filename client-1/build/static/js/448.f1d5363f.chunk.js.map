{"version":3,"file":"static/js/448.f1d5363f.chunk.js","mappings":"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","sources":["components/auth/SignOut.js","libs/Auth.js","libs/TrackPromise.js"],"sourcesContent":["import React from \"react\";\nimport { useEffect, useContext } from \"react\";\nimport { useHistory } from \"react-router-dom\";\nimport { useTranslation } from \"react-i18next\";\nimport { signOut } from \"../../libs/TrackPromise\";\nimport { AuthContext } from \"../../providers/AuthProvider\";\nimport { OnlineStatusContext } from \"../../providers/OnlineStatusProvider\";\nimport { toast } from \"../Toast\";\n\n\n\nfunction SignOut() {\n  const history = useHistory();\n  const isOnline = useContext(OnlineStatusContext);\n  const { auth, setAuth } = useContext(AuthContext);\n  const { t } = useTranslation();\n\n  // use `useEffect` to avoid  \"cannot update a component while rendering a different component\" error\n  useEffect(() => {\n    if (!isOnline) { // fake signout while offline...\n      //return toast.warning(\"You are currently offline. Please wait for the network to become available.\");\n      //console.log(\"signOut calling setAuth\");\n      console.log(\"SETAUTH {user: false}:\");\n      setAuth({ user: false });\n      history.replace(\"/\");\n    } else {\n      signOut({\n        success: () => {\n          //toast.success(t(\"Signed out\")); // too noisy...\n          //console.log(\"signOut calling setAuth\");\n          //console.log(\"SETAUTH auth:\", auth);\n          console.log(\"SETAUTH {user: false}:\");\n          setAuth({ user: false })\n          //console.log(\"SETAUTH auth:\", auth);\n          history.replace(\"/\");\n        },\n        error: (err) => {\n          console.error(\"signOut error:\", err);\n          toast.error(t(err.message));\n        }\n      });\n    }\n  }, [isOnline, history, auth, setAuth, t]);\n\n  return null;\n};\n\nexport default React.memo(SignOut);\n","import config from \"../config\";\n\nconst Auth = {\n  signUp: (params) => {\n    return fetcher(\"/api/auth/signup\", \"POST\", params);\n  },\n  signupVerification: (params) => {\n    return fetcher(`/api/auth/signupVerification`, \"POST\", params);\n  },\n  resendSignup: (params) => {\n    return fetcher(\"/api/auth/resendSignupCode\", \"POST\", params);\n  },\n  signIn: (params) => {\n    return fetcher(\"/api/auth/signin\", \"POST\", params);\n  },\n  // federatedSignIn: (params) => {\n  //   const retur = fetcher(\"/api/auth/loginGoogle\", \"GET\", params); // TODO: use the federated login based on params\n  //   alert(JSON.stringify(retur));\n  //   return retur;\n  // },\n  signOut: (params) => {\n    //return fetcher(\"/api/auth/signout\", \"POST\", params); // TODO: implement signout on server to accept refreshToken..\n    return new Promise((resolve, reject) => {\n      resolve();\n    });\n  }\n};\n\n\nconst fetcher = (url, method, params) => {\n  console.log(\"fetcher:\", url, method, params);\n  return new Promise((resolve, reject) => {\n    if (method === \"GET\" && params) {\n      url += \"?\" + Object.keys(params).map((key) => {\n        return encodeURIComponent(key) + \"=\" + encodeURIComponent(params[key])\n      }).join(\"&\");\n    }\n    //console.log(\"fetcher url 2:\", url);\n    var opt = {\n      method,\n      headers: new Headers(config.api.headers),\n      ...(params && method !== \"GET\" && { body: JSON.stringify(params) }),\n      redirect: config.api.redirect,\n    }\n    //console.log(\"fetcher opt:\", opt);\n    fetch(url, {\n      method,\n      headers: new Headers(config.api.headers),\n      ...(params && method !== \"GET\" && { body: JSON.stringify(params) }),\n      redirect: config.api.redirect,\n    })\n    .then(response => {\n      if (!response.ok) {\n        return response.json().then(data => {\n          console.error(`auth fetch ${url} response error, data:`, data);\n          const error = data.message ? data.message : data.error ? data.error : \"unknown error\";\n          reject(new Error(error));\n        });\n      }\n      return response.json();\n    })\n    .then(data => {\n      console.info(`auth fetch ${url} success:`, data);\n      resolve(data);\n    })\n    .catch(err => {\n      console.error(`auth fetch ${url} error:`, err);\n      reject(err);\n    });\n  });\n};\n\n////////////////////////////////////////////////////////\nconst fetcherORIG = (url, method, params) => {\nconsole.log(\"fetcher:\", url, method, params);\n  return new Promise((resolve, reject) => {\n    if (method === \"GET\" && params) {\n      url += \"?\" + Object.keys(params).map((key) => {\n        return encodeURIComponent(key) + \"=\" + encodeURIComponent(params[key])\n      }).join(\"&\");\n    }\nconsole.log(\"fetcher url 2:\", url);\nvar opt = {\n  method,\n  headers: new Headers(config.api.headers),\n  ...(params && method !== \"GET\" && { body: JSON.stringify(params) }),\n  redirect: config.api.redirect,\n}\nconsole.log(\"fetcher opt:\", opt);\n    fetch(url, {\n      method,\n      headers: new Headers(config.api.headers),\n      ...(params && method !== \"GET\" && { body: JSON.stringify(params) }),\n      //body: new URLSearchParams(params),\n      redirect: config.api.redirect,\n    })\n      .then(res => {\nconsole.log(\"fetcher res:\", res);\n        try {   \n          res.json().then(data => {\nconsole.log(`fetcher from ${url} res:`, res);\n            if (!res.ok) {\n              console.error(`fetch ${url} error:`, data.error);\n              reject({ status: res.status, statusText: res.statusText, message: data.error });\n            }\n            //if (!res.ok) reject({status: res.status, statusText: res.statusText, message: data.message ? data.message : res.statusText})\n            resolve(data);\n          });\n        } catch (err) {\n          console.error(`fetch ${url} json error:`, err);\n          reject(err);\n        }\n      })\n      .catch(err => {\n        console.error(`fetch ${url} error:`, err);\n        reject(err);\n      })\n    ;\n  });\n}\n\nexport default Auth;","//import React from \"react\";\n//import { Auth } from \"aws-amplify\";\nimport { trackPromise } from \"react-promise-tracker\";\nimport Auth from \"./Auth\";\n\n\n\nexport function NOTUSEDcurrentAuthenticatedUser({success, error, final}) {\n  trackPromise(\n    Auth.NOTUSEDcurrentAuthenticatedUser()\n      .then((data) => success(data))\n      .catch((data) => error(data))\n      .finally((data) => final(data))\n   );\n}\n\nexport function signIn(props, {success, error, final}) {\n  trackPromise(\n    Auth.signIn({...props})\n      .then((data) => {console.log(\"success:\", data); success(data)})\n      .catch((data) => {console.log(\"error:\", data); error(data)})\n      .finally((data) => final(data))\n  );\n}\n\nexport function federatedSignIn(props, {success, error, final}) {\n  trackPromise(\n    Auth.federatedSignIn({...props})\n      .then((data) => success(data))\n      .catch((data) => error(data))\n      .finally((data) => final(data))\n  );\n}\n  \nexport function signUp(props, {success, error, final}) {\n  trackPromise(\n    Auth.signUp({...props})\n      .then((data) => success(data))\n      .catch((data) => error(data))\n      .finally((data) => final(data))\n  );\n};\n\n//export function signupVerification(username, code, {success, error, final}) {\nexport function signupVerification(props, {success, error, final}) {\nconsole.log('TrackPromise - props:', props);\n  trackPromise(\n    Auth.signupVerification({...props})\n      .then((data) => success(data))\n      .catch((data) => error(data))\n      .finally((data) => final(data))\n  );\n};\n\nexport function forgotPassword(username, {success, error, final}) {\n  trackPromise(\n    Auth.forgotPassword(username)\n      .then((data) => success(data))\n      .catch((data) => error(data))\n      .finally((data) => final(data))\n  );\n};\n\nexport function resendSignup(username, {success, error, final}) {\n  trackPromise(\n    Auth.resendSignup(username)\n      .then((data) => success(data))\n      .catch((data) => error(data))\n      .finally((data) => final(data))\n  );\n};\n\nexport function forgotPasswordSubmit(username, code, password, {success, error, final}) {\n  trackPromise(\n    Auth.forgotPasswordSubmit(username, code, password,)\n      .then((data) => success(data))\n      .catch((data) => error(data))\n      .finally((data) => final(data))\n  );\n};\n\nexport function resendResetPasswordCode(username, {success, error, final}) {\n  trackPromise(\n    //Auth.resendResetPassword(username)\n    Auth.resendSignup(username)\n      .then((data) => success(data))\n      .catch((data) => error(data))\n      .finally((data) => final(data))\n  );\n};\n\nexport function signOut({success, error, final}) {\n  trackPromise(\n    Auth.signOut()\n      .then((data) => success(data))\n      .catch((data) => error(data))\n      .finally((data) => final(data))\n  );\n};\n"],"names":["SignOut","history","useHistory","isOnline","useContext","OnlineStatusContext","auth","setAuth","AuthContext","t","useTranslation","useEffect","signOut","success","console","log","user","replace","error","err","toast","message","React","Auth","signUp","params","fetcher","signupVerification","resendSignup","signIn","Promise","resolve","reject","url","method","Object","keys","map","key","encodeURIComponent","join","Headers","config","api","headers","JSON","stringify","redirect","fetch","body","then","response","ok","json","data","Error","info","catch","props","_ref4","final","trackPromise","finally","_ref5","username","_ref7","_ref10"],"sourceRoot":""}