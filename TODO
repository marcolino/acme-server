- tradurre le notifiche e i messaggi logger - NO
- rivedere /api/user/updateUserProperty (e successive) come /api/user/updateUser - NO
- cambiare nomi controllers: controllers/articles.controllers.js => controllers/articles.js - NO
- gestire le traduzioni delle risposte (in base a "accept-language") - OK
- res.status().send -> res.status().json - OK
- cambiare "we" in una forma impersonale - OK
- usare req.t("text") per tutti i testi - OK
- tradurre tutto in locales/ (cercando le stringhe vuote, "") - OK
- nella registrazione, in caso di email già presente, controllare se non è verificato, e comunicarlo all'utente - OK
- implementare TTL per le collezioni mongodb con scadenza - OK
- impostare tests con chai - OK
- logger, accesso utente: no data ma email nel soggetto - OK
- in test/controllers/user.test.js, test updatePlan e updateRoles - OK
- tradurre anche middlewares, helpers - OK
- rimuovere i console.* (a parte i console.errors nel logger controller setup) - OK
- add logger.error in tutte le catch - OK
- usare sempre req.parameters e non req.body o req.query - OK
- risolvere la confusione x-access-token / x-auth-token - OK
- usare Authentication Bearer insted of x-auth-toksn (on client too) - OK
- invece di module.exports = { ... } nei moduli, usare exports individuali - OK
- verificare che ./public/badges serva (usato in coverage) - OK
- attivare repository git - OK
- SENDMAIL_FROM_EMAIL - OK
- gestire invio email con smtp di gmail (account: sistemisolari@gmail.com) - OK
- verificare che dynamicStringsForTranslation funzioni e sia aggiornato - OK
- gestire email templates con i18n - OK
- verificare se esiste un tool per trovare dipendenze non utilizzato, ed eliminarle - OK
- verificare se esiste un tool per trovare parti di codice non utilizzato, ed eliminarle - OK
- verificare che ./public/images serva - OK
- implementare invio email html ad una lista di utenti - OK
- aggiungere "Please contact support at {{email}}" ai messaggi di errore (500) - OK
- usare jwt sia per access che refresh tokens (?) - OK
- in tutti i controller di routes, in caso di errore fare sempre: catch (err) { logger.error("Error BLA BLA:", err); return next(Object.assign(new Error(err.message), { status: 500 })); }; - OK
- testare sempre le interazioni col database (i.e.: user.save(err => { ...}))
- aggiungere `next(err); // pass the error to the error handling middleware` alle catch di tutte le routes - OK
- ripulire tutto il codice dalle parti commentate (disabilitate) - OK
- completare il coverage dei tests - OK
- eliminare tutti i NODE_ENV non necessari - OK
- completare e pulire il file README.md, e pulire NOTES
- verificare che i18n becchi tuttle le traduzioni nei templates - OK
- test "should remove all users with admin privileges" si blocca (tutti gli utenti isDeleted) - OK
- css, logo, [unsubscribe-link] and [preferences-link] nei templates delle email - OK
- quando si registra un utente, accettare anche utenti in stato isDeleted (attualmente no, si potrebbe poi implementare un pruning degli utenti cancellati...) - OK
- aggiungere language nel doc user, settarlo in fase di login da req.language, e usarlo quando si inviano emails bulk, e testare il tutto - OK
- aggiungere un tool per il controllo di secrets nel codice - OK
- decidere come gestire le notifiche in produzione (betterstack) - OK
- correggere "Error looking for..." in "Error finding ..." - OK
- http://localhost:5000/api/auth ritorna correttamente JSON, ma http://localhost:5000/api ritorna HTML - OK
- resetpassword: se email non trovata, non andare subito in errore, per ridurre la superficie d'attacco... - OK

- nel login regolare, cercare per password E socialId...

NEWFEATURE:
- gestire "justRegistered", se necessario

- rimuovere gli account non confermati, periodicamente (quando sarà necessario)
- aggiungere l'anno di riferimento ai prodotti stripe (quando saranno usati)
 http://localhost:5000/api/